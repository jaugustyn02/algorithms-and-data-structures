Zad.1
	Treść: Sprawdzić czy jest możliwe wybranie takiego podciągu z tablicy A, że elementy tego podciągu sumują się do wartość T.
	
	1. Funkcja rekurencyjna:
		f(i, t) = {1, jeśli w F[0, ..., i-1] da się wybrać podciąg o sumie T-A[i]
			     {0, w.p.p
		
		f(i, t) = f(i-1, t) or (i-1,  t-A[i])
		f(0, 0) = 1
		f(i, o) = 1
		
	2. Implementacja:
	
	def subset(A, T):
	    n = len(A)
	    F = [[0 for _ in range(T+1)] for _ in range(n+1)]
	    for i in range(n+1):
		F[i][0] = 1
	    for i in range(n+1):
		for t in range(T+1):
		    F[i][t] = F[i-1][t]
		    if t - A[i-1] >= 0:
		        F[i][t] = F[i-1][t-A[i-1]]
	    return F[n][T]
		
Zad. 2
	Najdłuższy wspólny podciąg (Longest common subsequence) tablic A i B o długości n.
	
	1. Funkcja rekurencyjna:
		f(i, j) = {f(i-1, j-1) + 1, if A[i-1] == B[j-1]
			     {max(f(i-1, j), f(i, j-1), w.p.p
			     
	f(i, 0) = 0
	f(0, j) = 0
	
	2. Implementacja:
	
	def LCS(A, B):
		n = len(A)
		F = [[0 for _ in range(n+1)] for _ in range(n+1)]
		for i in range(1, n+1):
			for j in range(1, n+1):
				if A[i-1] == B[j-1]:
					F[i][j] = F[i-1][j-1] + 1
				else:
					F[i][j] = max(F[i-1][j], F[i][j-1])
	return F[n][n]
	
	3. Wykorzystanie powyższego algorytmu do znalezienia najdłuższego rosnącego 
	(niekoniecznie spójnego) podciągu tablicy A.
	
	Utworzenie tablicy B, będącej posortowaną tablicą A:
	np.
		A = [2, 1, 5, 7, 4, 2, 7, 8] - wejściowa tablica
		B = [1, 2, 2, 4, 5, 7, 7, 8] - posortowana tablica A
	
	znaleść najdłuższy wspólny podciąg - LCS(A, B)

Zad. 3
	Najoptymalniesza kolejność wymnażania macierzy.
														 a1		a2
	Jakieś rozpatrzanie ilości wykonywania operacji mnożenia: a0[...]  *  a1[...]     ilość operacji = a0 * a1 * a2
	
Zad. 4
	Pola szachownicy [n x n] wypełnione są liczbami rzeczywistymi. Koszt wejścia na dane pole to liczba na tym polu.
	Znaleść najniższy koszt jakim można przejść od pola [1, 1] do [n, n], poruszając się o jedno pole w dół lub w prawo.
	
	1. Funkcja rekurencyjna:
		F - tablica pomocniczna
		F[i, j] = A[i][j] + min(F[i-1][j], F[i][j-1]), dla i,j > 0
	                  
	        wartości graniczne:
	       	F[0, j] = A[0][j] + F[0][j-1], dla j > 0
	       	F[i, 0] = A[i][0] + F[i-1][0], dla i > 0
	       	
	       	Poszukiwana wartość w F[n-1][n-1]
	
	2. Implementacja
	def min_path(A):
	    n = len(A)
	    F = [[0 for _ in range(n)] for _ in range(n)]
	    for i in range(1, n):
		F[0][i] = A[0][i] + F[0][i - 1]
		F[i][0] = A[i][0] + F[i - 1][0]
	    for i in range(1, n):
		for j in range(1, n):
		    F[i][j] = A[i][j] + min(F[i - 1][j], F[i][j - 1])

	    return F[n - 1][n - 1]

		
	
